{"version":3,"sources":["IconSet.js","App.js","serviceWorker.js","index.js"],"names":["IconSet","state","icons","fetch","then","r","text","setState","window","dispatchEvent","CustomEvent","this","dangerouslySetInnerHTML","__html","React","Component","App","useState","rolledDice","setRolledDice","newDiceType","setNewDiceType","total","setTotal","addNewDice","dice","maxValue","value","Math","floor","random","concat","newTotal","additionalClasses","choices","label","variant","onChange","e","target","itemSpacing","splitAt","onClick","id","uniqueId","className","map","key","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oTA2BeA,E,kDAvBb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CAAEC,MAAO,IAFV,E,gEAKO,IAAD,OAClBC,MAAM,+FACHC,MAAK,SAAAC,GAAC,OAAIA,EAAEC,UACZF,MAAK,SAACE,GACL,EAAKC,SAAS,CAAEL,MAAOI,OACtBF,MAAK,WACNI,OAAOC,cAAc,IAAIC,YAAY,sB,+BAIjC,IACAR,EAAUS,KAAKV,MAAfC,MACR,OACE,yBAAKU,wBAAyB,CAAEC,OAAQX,S,GAnBxBY,IAAMC,WCsEbC,MAnEf,WAAgB,IAAD,EAEuBC,mBAAS,IAFhC,mBAENC,EAFM,KAEMC,EAFN,OAGyBF,mBAAS,GAHlC,mBAGNG,EAHM,KAGOC,EAHP,OAIaJ,mBAAS,GAJtB,mBAINK,EAJM,KAICC,EAJD,KAMb,SAASC,EAAWC,GAOpB,IAAkBC,EANhBD,EAAKE,OAMWD,EANMD,EAAKC,SAObE,KAAKC,MAAMD,KAAKE,SAAWJ,GAAY,GANrDP,EAAcD,EAAWa,OAAON,IAChC,IAAMO,EAAWV,EAAQG,EAAKE,MAC9BJ,EAASS,GAaX,OACE,kBAAC,qBAAD,CAAoBC,kBAAkB,6BACpC,kBAAC,EAAD,MACA,kBAAC,qBAAD,CACEC,QAAS,CACP,CAAEC,MAAO,IAAKR,MAAO,KACrB,CAAEQ,MAAO,IAAKR,MAAO,KACrB,CAAEQ,MAAO,IAAKR,MAAO,KACrB,CAAEQ,MAAO,KAAMR,MAAO,MACtB,CAAEQ,MAAO,KAAMR,MAAO,MACtB,CAAEQ,MAAO,KAAMR,MAAO,OAExBS,QAAQ,SACRD,MAAM,YACNR,MAAOP,EACPiB,SAAU,SAACC,GAAD,OAAOjB,EAAeiB,EAAEC,OAAOZ,QACzCM,kBAAkB,eAEpB,kBAAC,YAAD,CAAWO,YAAY,SAASC,QAAQ,OAAOR,kBAAkB,cAC/D,kBAAC,gBAAD,CAAeA,kBAAkB,gCAC/B,kBAAC,aAAD,CAAYS,QAAS,WAAQlB,EAAW,CAAEE,SAAUN,EAAauB,GAAIC,UAArE,gBAIF,kBAAC,gBAAD,CAAeX,kBAAkB,+BAC/B,kBAAC,aAAD,CAAYG,QAAQ,YAAYM,QAAS,WA7B/CvB,EAAc,IACdI,EAAS,KA4BH,gBAKJ,yBAAKsB,UAAU,cAAf,UACUvB,GAEV,yBAAKuB,UAAU,uBACZ3B,EAAW4B,KAAI,SAACrB,GAAD,OACd,yBAAKoB,UAAW,0CAA4CpB,EAAKC,SAAUqB,IAAKtB,EAAKkB,IAClFlB,EAAKE,aCrDEqB,QACW,cAA7BxC,OAAOyC,SAASC,UAEe,UAA7B1C,OAAOyC,SAASC,UAEhB1C,OAAOyC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvD,MAAK,SAAAwD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b51fbba4.chunk.js","sourcesContent":["/* global fetch window CustomEvent */\nimport React from 'react';\n\nclass IconSet extends React.Component {\n  constructor() {\n    super();\n    this.state = { icons: '' };\n  }\n\n  componentDidMount() {\n    fetch('https://www.rockomni.com/mcds/assets/GlobalContent/NonStockImages/Icons/spark-icons-V14.svg')\n      .then(r => r.text())\n      .then((text) => {\n        this.setState({ icons: text });\n      }).then(() => {\n        window.dispatchEvent(new CustomEvent('icons-loaded'));\n      });\n  }\n\n  render() {\n    const { icons } = this.state;\n    return (\n      <div dangerouslySetInnerHTML={{ __html: icons }} />\n    );\n  }\n}\n\nexport default IconSet;","import React, { useState } from 'react';\nimport './App.scss';\nimport { SprkStack, SprkStackItem, SprkSelectionInput, SprkCenteredColumn, SprkButton } from '@sparkdesignsystem/spark-react';\nimport uniqueId from 'lodash/uniqueId';\nimport IconSet from './IconSet';\n\nfunction App() {\n\n  const [rolledDice, setRolledDice] = useState([]);\n  const [newDiceType, setNewDiceType] = useState(6);\n  const [total, setTotal] = useState(0);\n\n  function addNewDice(dice) {\n    dice.value = rollDice(dice.maxValue);\n    setRolledDice(rolledDice.concat(dice));\n    const newTotal = total + dice.value;\n    setTotal(newTotal);\n  }\n\n  function rollDice(maxValue) {\n    const value = Math.floor(Math.random() * maxValue) + 1;\n    return value;\n  }\n\n  function clear() {\n    setRolledDice([]);\n    setTotal(0);\n  }\n\n  return (\n    <SprkCenteredColumn additionalClasses=\"app sprk-u-phh sprk-u-mvl\">\n      <IconSet></IconSet>\n      <SprkSelectionInput\n        choices={[\n          { label: '4', value: '4' },\n          { label: '6', value: '6' },\n          { label: '8', value: '8' },\n          { label: '10', value: '10' },\n          { label: '12', value: '12' },\n          { label: '20', value: '20' },\n        ]}\n        variant=\"select\"\n        label=\"Dice Type\"\n        value={newDiceType}\n        onChange={(e) => setNewDiceType(e.target.value)}\n        additionalClasses=\"sprk-u-mbm\"\n      />\n      <SprkStack itemSpacing=\"medium\" splitAt=\"tiny\" additionalClasses=\"sprk-u-mbm\">\n        <SprkStackItem additionalClasses=\"sprk-o-Stack__item--half@xs \">\n          <SprkButton onClick={() => { addNewDice({ maxValue: newDiceType, id: uniqueId() }) }}>\n            Roll a dice\n          </SprkButton>\n        </SprkStackItem>\n        <SprkStackItem additionalClasses=\"sprk-o-Stack__item--half@xs\">\n          <SprkButton variant=\"secondary\" onClick={() => { clear() }}>\n            Start Over\n          </SprkButton>\n        </SprkStackItem>\n      </SprkStack>\n      <div className=\"sprk-u-mbm\">\n        Total: {total}\n      </div>\n      <div className=\"rolledDiceContainer\">\n        {rolledDice.map((dice) =>\n          <div className={\"sprk-u-AbsoluteCenter sprk-u-mbm dice d\" + dice.maxValue} key={dice.id}>\n            {dice.value}\n          </div>\n        )}\n      </div>\n    </SprkCenteredColumn>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}